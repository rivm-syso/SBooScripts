---
title: "DAG"
author: "JS"
date: "5/3/2022"
output: html_document
---

```{r setup, include=FALSE}
knitr::knit_meta()
knitr::opts_chunk$set(echo = TRUE)
projectRoot <- paste(getwd(), "..", sep = "/")
knitr::opts_knit$set(root.dir = projectRoot) #assuming vignette is in a direct subfolder of the project
```

## Directed Acyclic Graph (DAG) in sboo

The package ggdag (depending heavily on dagitty) can be used to plot the dependency of processes on variables, which depend on other variables, etc. This vignettes demonstrates how you can use this to document a process.

```{r initsome}
library(dagitty, ggdag)
library(tidyverse)
#init default core (World) with classic states, and classic kaas
source("baseScripts/initTestWorld.R")
```

## calculate variables and the k of a process (k_AdvectionRiverSeaScales)
This process is exceptionally complex by original design. A good description is paramount. First define and calculate some basic variables
```{r calcbasicvars, echo=FALSE}
lapply(c("AreaSea", "AreaLand", "Area"), function(FuName){
  World$NewCalcVariable(FuName)
  World$CalcVar(FuName)
})
testVar <- World$NewCalcVariable("Volume")
World$CalcVar("Volume")

```

## Then the elaborate calculating of the flows, and finally the k values (the reversed way of normal operating procedure)
```{r calcspecificvars, echo=FALSE}
v_RainRunOff <- World$NewCalcVariable("RainRunoff")
World$CalcVar("RainRunoff")

v_ContRiverDischarge <- World$NewCalcVariable("ContRiver2Reg")
World$CalcVar("ContRiver2Reg")

v_ContRiverDischarge <- World$NewCalcVariable("RiverDischarge")
World$CalcVar("RiverDischarge")

v_ContRiverDischarge <- World$NewCalcVariable("LakeOutflow")
World$CalcVar("LakeOutflow")

v_ContSea2Reg <- World$NewCalcVariable("ContSea2Reg")
#v_ContSea2Reg$execute(debugAt = list(Scale="Regional"))
World$CalcVar("ContSea2Reg")

v_RegSea2Cont <- World$NewCalcVariable("RegSea2Cont")
#v_ContSea2Reg$execute(debugAt = list(Scale="Regional"))
World$CalcVar("RegSea2Cont")

v_RegSea2Cont <- World$NewCalcVariable("ContSea2Moder")
World$CalcVar("ContSea2Moder")

k_AdvectionH2O <- World$NewProcess("k_AdvectionRiverSeaScales")
k_AdvectionH2O <- World$NewProcess("k_AdvectionWaters")
k_AdvectionH2O <- World$NewProcess("k_AdvectionSeaOcean")

World$UpdateKaas(mergeExisting = F)

```

## plot the tree
```{r plotprocess, echo=FALSE}
NodeAsText <- paste(World$nodelist$Params, "->" ,World$nodelist$Calc)
AllNodesAsText <- do.call(paste, c(as.list(NodeAsText), list(sep = ";")))
dag <- dagitty::dagitty(paste("dag{", AllNodesAsText, "}"))
ggdag(dag, node = F, text_col = "black")
```

## Too much
Obviously the tree is more complex than there is space in the graph... But we can eliminate parts. Firstly select the ancestry of the endpoint to show, for example k_AdvectionRiverSeaScales. Secondly calculating Volume can be described elsewhere; all "parent" branches of it can be removed... and their parents. The functions are for convienence.
```{r ParentOfVolume, echo=FALSE}

AncSubGraph <- ancestorGraph(dag, "k_AdvectionRiverSeaScales")

AllParents <- function(LeaveName){
  dagitty::parents(AncSubGraph, LeaveName)
}
VolParents <- AllParents("Volume")
NoCookieVerkade <- function(Leaveparents){
  grandParents <- sapply(Leaveparents, AllParents)
  uniqueUnlist <- unique(c(unlist(grandParents)))
  #cat(c(uniqueUnlist, "\n"))
  if (length(uniqueUnlist) == 0) {
    return (NULL)
  } else { #recursively!
    return(unique(c(grandParents,NoCookieVerkade(uniqueUnlist))))
  }
}
ToRemove <- c(VolParents,unlist(NoCookieVerkade(VolParents)))

```
## remake the DAG
Not so easy to eliminate edges with R - dagitty... from the nodes onward seems the way.

```{r EdgesNoVolume, echo=FALSE}
AllNodes <- data.frame(
  Param = World$nodelist$Params,
  Calc = World$nodelist$Calc
)
NodesNoVol <- AllNodes[!(AllNodes$Param %in% ToRemove | AllNodes$Calc %in% ToRemove),]
NodeAsText <- paste(NodesNoVol$Param, "->" ,NodesNoVol$Calc)
AllNodesAsText <- do.call(paste, c(as.list(NodeAsText), list(sep = ";")))
dag <- dagitty::dagitty(paste("dag{", AllNodesAsText, "}"))
#plot(dagitty::graphLayout(dag))
theme_set(theme_dag())
ggdag(dag, node_size = 0.001, text_col = "black")
```
## By hand
Or you can paste the code below to the "Model code" at http://dagitty.net/
Then you can layout the DAG to 
```{r plotdag, echo=FALSE, fig.cap="A caption", out.width = '100%'}
knitr::include_graphics("vignettes/dagitty-model.png")
```

```{r byhad, echo=FALSE}
AllNodesAsText <- do.call(paste, c(as.list(NodeAsText), list(sep = "\n")))
cat(paste("dag{", AllNodesAsText, "}"))
```